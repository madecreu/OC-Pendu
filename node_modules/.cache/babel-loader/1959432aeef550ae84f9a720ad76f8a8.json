{"ast":null,"code":"var _jsxFileName = \"/home/mdecreux/OC/pendu/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport Keyboard from \"./Keyboard\";\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const randomWords = require('random-words');\n\n  console.log(randomWords({\n    formatter: word => word.toUpperCase()\n  }));\n  const [word, setWord] = useState(randomWords({\n    formatter: word => word.toUpperCase()\n  }));\n  const [usedLetters, setUsedLetters] = useState([]);\n  const [count, setCount] = useState(0);\n  const alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  const [end, setEnd] = useState(false);\n\n  const computeDisplay = () => word.replace(/\\w/g, letter => usedLetters.includes(letter) ? letter : '_');\n\n  const handleTry = letter => {\n    setUsedLetters([...usedLetters, letter]);\n    computeDisplay();\n    setCount(count + 1);\n    if (!usedLetters.includes('_')) setEnd(true);\n  };\n\n  const restart = () => {\n    setUsedLetters([]);\n    setCount(0);\n    setWord(randomWords({\n      formatter: word => word.toUpperCase()\n    }));\n    setEnd(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"word\",\n      children: computeDisplay(word, usedLetters)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Nombres d'essais : \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: end ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => restart(),\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {\n        alphabet: alphabet,\n        handleTry: handleTry,\n        usedLetters: usedLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => console.log(usedLetters),\n      children: \"log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"AWRZoQzsEUG15SGjF7J7Ihoko/U=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mdecreux/OC/pendu/src/App.js"],"names":["useState","Keyboard","App","randomWords","require","console","log","formatter","word","toUpperCase","setWord","usedLetters","setUsedLetters","count","setCount","alphabet","end","setEnd","computeDisplay","replace","letter","includes","handleTry","restart"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\nimport Keyboard from \"./Keyboard\";\nimport './App.css'\n\nconst App = () => {\n    const randomWords = require('random-words');\n    console.log(randomWords({formatter: (word) => word.toUpperCase()}));\n  const [word, setWord] = useState(randomWords({formatter: (word) => word.toUpperCase()}));\n  const [usedLetters, setUsedLetters] = useState([]);\n  const [count, setCount] = useState(0);\n  const alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n  const [end, setEnd] = useState(false);\n\n  const computeDisplay = () => word.replace(/\\w/g, (letter) => (usedLetters.includes(letter) ? letter : '_'));\n\n  const handleTry = (letter) => {\n      setUsedLetters([...usedLetters, letter]);\n      computeDisplay();\n      setCount(count + 1);\n      if (!usedLetters.includes('_'))\n          setEnd(true);\n  }\n\n  const restart = () => {\n      setUsedLetters([]);\n      setCount(0);\n      setWord(randomWords({formatter: (word) => word.toUpperCase()}));\n      setEnd(false);\n  }\n\n  return (\n    <div className=\"App\">\n        <h1 className=\"word\">{computeDisplay(word, usedLetters)}</h1>\n        <h3>Nombres d'essais : {count}</h3>\n        <div>\n            {end\n              ? <button onClick={() => restart()}>Restart</button>\n              : <Keyboard alphabet={alphabet} handleTry={handleTry} usedLetters={usedLetters} />\n            }\n        </div>\n        <button onClick={() => console.log(usedLetters)}>log</button>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}