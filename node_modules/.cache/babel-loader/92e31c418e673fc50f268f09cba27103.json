{"ast":null,"code":"var _jsxFileName = \"/home/mdecreux/OC/pendu/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Keyboard from \"./Keyboard\";\nimport './App.css';\nimport randomWords from 'random-words';\nimport { useEffect, useCallback, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [word, setWord] = useState(randomWords().toUpperCase());\n  const [usedLetters, setUsedLetters] = useState([]);\n  const [count, setCount] = useState(0);\n  const alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  const [end, setEnd] = useState(false);\n  const computeDisplay = useCallback(() => word.replace(/\\w/g, letter => usedLetters.includes(letter) ? letter : '_'), [word, usedLetters]);\n  useEffect(() => {\n    if (!computeDisplay(usedLetters).includes('_')) setEnd(true);\n    console.log(usedLetters);\n    console.log(end);\n  }, [usedLetters, end, computeDisplay]);\n\n  const handleTry = letter => {\n    setUsedLetters(usedLetters => [...usedLetters, letter]);\n    setCount(count + 1);\n  };\n\n  const handleRestart = () => {\n    setUsedLetters([]);\n    setCount(0);\n    setWord(randomWords().toUpperCase());\n    setEnd(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"word\",\n      children: computeDisplay(usedLetters)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Nombres d'essais : \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: end ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRestart(),\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {\n        alphabet: alphabet,\n        handleTry: handleTry,\n        usedLetters: usedLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"tpxWx/5HkAicTN1jaMePgzhtZgY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mdecreux/OC/pendu/src/App.js"],"names":["Keyboard","randomWords","useEffect","useCallback","useState","App","word","setWord","toUpperCase","usedLetters","setUsedLetters","count","setCount","alphabet","end","setEnd","computeDisplay","replace","letter","includes","console","log","handleTry","handleRestart"],"mappings":"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","sourcesContent":["import Keyboard from \"./Keyboard\";\nimport './App.css'\nimport randomWords from 'random-words'\nimport {useEffect , useCallback, useState} from \"react\";\n\nconst App = () => {\n    const [word, setWord] = useState(randomWords().toUpperCase());\n    const [usedLetters, setUsedLetters] = useState([]);\n    const [count, setCount] = useState(0);\n    const alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    const [end, setEnd] = useState(false);\n\n    const computeDisplay = useCallback(() =>\n        word.replace(/\\w/g, (letter) => (usedLetters.includes(letter) ? letter : '_')), [word, usedLetters]);\n\n    useEffect( () => {\n        if (!computeDisplay(usedLetters).includes('_'))\n            setEnd(true);\n        console.log(usedLetters);\n        console.log(end);\n    }, [usedLetters, end, computeDisplay]);\n\n    const handleTry = (letter) => {\n        setUsedLetters((usedLetters) => [...usedLetters, letter]);\n        setCount(count + 1);\n    }\n\n    const handleRestart = () => {\n        setUsedLetters([]);\n        setCount(0);\n        setWord(randomWords().toUpperCase());\n        setEnd(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"word\">{computeDisplay(usedLetters)}</h1>\n            <h3>Nombres d'essais : {count}</h3>\n            <div>\n                {end\n                    ? <button onClick={() => handleRestart()}>Restart</button>\n                    : <Keyboard alphabet={alphabet} handleTry={handleTry} usedLetters={usedLetters}/>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}