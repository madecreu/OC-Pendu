{"ast":null,"code":"var _jsxFileName = \"/home/mdecreux/OC/pendu/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Keyboard from \"./Keyboard\";\nimport ListUsedLetters from \"./ListUsedLetters\";\nimport './App.css';\nimport randomWords from 'random-words';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst computeDisplay = (word, usedLetters) => word.replace(/\\w/g, letter => usedLetters.includes(letter) ? letter : '_');\n\nconst App = () => {\n  _s();\n\n  const [word, setWord] = useState(randomWords().toUpperCase());\n  const [usedLetters, setUsedLetters] = useState([]);\n  const [count, setCount] = useState(0);\n  const [end, setEnd] = useState(false);\n  useEffect(() => {\n    if (!computeDisplay(word, usedLetters).includes('_')) {\n      setEnd(true);\n    }\n  }, [usedLetters, end, word]);\n\n  const handleTry = event => {\n    const triedLetter = event.currentTarget.value.toUpperCase();\n    setUsedLetters(usedLetters => [...usedLetters, triedLetter]);\n    setCount(count => count + 1);\n  };\n\n  const handleRestart = () => {\n    setUsedLetters([]);\n    setCount(0);\n    setWord(randomWords().toUpperCase());\n    setEnd(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"word\",\n      name: \"word\",\n      children: computeDisplay(word, usedLetters)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Nombres d'essais : \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: end ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleRestart(),\n        children: \"Restart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 23\n      }, this) : /*#__PURE__*/_jsxDEV(Keyboard, {\n        handleTry: handleTry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Lettres d\\xE9j\\xE0 essay\\xE9es :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ListUsedLetters, {\n        usedLetters: usedLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"IGEF/UiVdIoj8UkgP2jnPfED8AE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mdecreux/OC/pendu/src/App.js"],"names":["Keyboard","ListUsedLetters","randomWords","useEffect","useState","computeDisplay","word","usedLetters","replace","letter","includes","App","setWord","toUpperCase","setUsedLetters","count","setCount","end","setEnd","handleTry","event","triedLetter","currentTarget","value","handleRestart"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,YAArB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,WAAP;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;;AAEA,MAAMC,cAAc,GAAG,CAACC,IAAD,EAAOC,WAAP,KAAuBD,IAAI,CAACE,OAAL,CAAa,KAAb,EAAqBC,MAAD,IAAaF,WAAW,CAACG,QAAZ,CAAqBD,MAArB,IAA+BA,MAA/B,GAAwC,GAAzE,CAA9C;;AAEA,MAAME,GAAG,GAAG,MAAM;AAAA;;AACd,QAAM,CAACL,IAAD,EAAOM,OAAP,IAAkBR,QAAQ,CAACF,WAAW,GAAGW,WAAd,EAAD,CAAhC;AACA,QAAM,CAACN,WAAD,EAAcO,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACa,GAAD,EAAMC,MAAN,IAAgBd,QAAQ,CAAC,KAAD,CAA9B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACE,cAAc,CAACC,IAAD,EAAOC,WAAP,CAAd,CAAkCG,QAAlC,CAA2C,GAA3C,CAAL,EAAsD;AAClDQ,MAAAA,MAAM,CAAC,IAAD,CAAN;AACH;AACJ,GAJQ,EAIN,CAACX,WAAD,EAAcU,GAAd,EAAmBX,IAAnB,CAJM,CAAT;;AAOA,QAAMa,SAAS,GAAIC,KAAD,IAAW;AACzB,UAAMC,WAAW,GAAGD,KAAK,CAACE,aAAN,CAAoBC,KAApB,CAA0BV,WAA1B,EAApB;AACAC,IAAAA,cAAc,CAAEP,WAAD,IAAiB,CAAC,GAAGA,WAAJ,EAAiBc,WAAjB,CAAlB,CAAd;AACAL,IAAAA,QAAQ,CAAED,KAAD,IAAWA,KAAK,GAAG,CAApB,CAAR;AACH,GAJD;;AAMA,QAAMS,aAAa,GAAG,MAAM;AACxBV,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACAJ,IAAAA,OAAO,CAACV,WAAW,GAAGW,WAAd,EAAD,CAAP;AACAK,IAAAA,MAAM,CAAC,KAAD,CAAN;AACH,GALD;;AAOA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAI,MAAA,SAAS,EAAC,MAAd;AAAqB,MAAA,IAAI,EAAC,MAA1B;AAAA,gBAAkCb,cAAc,CAACC,IAAD,EAAOC,WAAP;AAAhD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,wCAAwBQ,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBACKE,GAAG,gBACE;AAAQ,QAAA,OAAO,EAAE,MAAMO,aAAa,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,gBAEE,QAAC,QAAD;AAAU,QAAA,SAAS,EAAEL;AAArB;AAAA;AAAA;AAAA;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA,YAHJ,eASI;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,eAAD;AAAiB,QAAA,WAAW,EAAEZ;AAA9B;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAgBH,CA1CD;;GAAMI,G;;KAAAA,G;AA4CN,eAAeA,GAAf","sourcesContent":["import Keyboard from \"./Keyboard\";\nimport ListUsedLetters from \"./ListUsedLetters\";\nimport './App.css'\nimport randomWords from 'random-words'\nimport {useEffect, useState} from \"react\";\n\nconst computeDisplay = (word, usedLetters) => word.replace(/\\w/g, (letter) => (usedLetters.includes(letter) ? letter : '_'));\n\nconst App = () => {\n    const [word, setWord] = useState(randomWords().toUpperCase());\n    const [usedLetters, setUsedLetters] = useState([]);\n    const [count, setCount] = useState(0);\n    const [end, setEnd] = useState(false);\n\n    useEffect(() => {\n        if (!computeDisplay(word, usedLetters).includes('_')) {\n            setEnd(true);\n        }\n    }, [usedLetters, end, word]);\n\n\n    const handleTry = (event) => {\n        const triedLetter = event.currentTarget.value.toUpperCase();\n        setUsedLetters((usedLetters) => [...usedLetters, triedLetter]);\n        setCount((count) => count + 1);\n    }\n\n    const handleRestart = () => {\n        setUsedLetters([]);\n        setCount(0);\n        setWord(randomWords().toUpperCase());\n        setEnd(false);\n    }\n\n    return (\n        <div className=\"App\">\n            <h1 className=\"word\" name=\"word\">{computeDisplay(word, usedLetters)}</h1>\n            <h3>Nombres d'essais : {count}</h3>\n            <div>\n                {end\n                    ? <button onClick={() => handleRestart()}>Restart</button>\n                    : <Keyboard handleTry={handleTry} />\n                }\n            </div>\n            <div>\n                <h2>Lettres déjà essayées :</h2>\n                <ListUsedLetters usedLetters={usedLetters}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}